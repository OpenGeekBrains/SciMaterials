@using SciMaterials.Contracts.API.DTO.Resources;
@using SciMaterials.Contracts.WebApi.Clients.Resources;
@if (_resources is null)
{
    <p>Loading...</p>
}
else
{
<MudGrid Spacing="3" Justify="Justify.FlexStart" Class="pb-5">
	@foreach (GetResourceResponse resource in _resources)
	{
			<MudItem xs=12 sm=6 md=4 lg=3 xl=2 style="min-width:400px;">
			<MudCard>
				<MudCardHeader>
					<CardHeaderContent>
							<div class="d-flex gap-1">
								<MudText Class="flex-1 d-flex" Typo="Typo.h6">@resource.Name</MudText>
								@switch(resource.ResourceType)
								{
									case Domain.Enums.ResourceType.File:
										<MudIcon Class="flex-none d-flex" Icon="@Icons.Material.Filled.FilePresent" Title = "File" />
										break;
									case Domain.Enums.ResourceType.Url:
										<MudIcon Class = "flex-none d-flex" Icon = "@Icons.Material.Filled.Link" Title = "Url" />
										break;
									case Domain.Enums.ResourceType.FileGroup:
										<MudIcon Class = "flex-none d-flex" Icon = "@Icons.Material.Filled.Collections" Title = "File group" />
										break;
								}
							</div>
					</CardHeaderContent>
@*					<CardHeaderActions>
						<MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" />
					</CardHeaderActions>
*@				</MudCardHeader>
				<MudCardContent>
						<MudText Class="resource-card-description">@resource.ShortInfo+"csdds dsiv sdv woirowi oi  or boer boier ober ob eor bo   bioerobi erob jeroi movoiweviwn o voiw voiwevowe   voiwjeoivweoijvoiwejvijwei wovi weovjwoeiv we"</MudText>
						@*<MudText Class="w-30" Typo="Typo.body2"></MudText>*@
				</MudCardContent>
				<MudCardActions>
					<MudRating SelectedValue="2" />
			        <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color="Color.Default" />
					<MudIconButton Icon="@Icons.Material.Filled.Share" Color="Color.Default" />
					<MudSpacer />
					<MudButton Variant="Variant.Text" Color="Color.Primary">Read More</MudButton>
				</MudCardActions>
			</MudCard>
		</MudItem>
	}
</MudGrid>
}

@code {
	[Parameter] public int PageNumber{get;set;}
	[Parameter] public Action<int> TotalPagesCountChanged{get; set;}

	@* [Parameter] public int TotalPagesCount{get;set;} *@
    @* [Parameter] public EventCallback<int> TotalPagesCountChanged { get; set; } *@

	[Inject] private IResourcesClient _resourcesClient { get; set; }
	private const int m_pageSize = 24;
	private IEnumerable<GetResourceResponse>? _resources = null;

	public async Task ServerLoadAsync()
	{
		_resources = null;
		await Task.Delay(20);
		var result = await _resourcesClient.GetPageAsync(PageNumber, m_pageSize);
		if (result.Succeeded && result.Data is { })
		{
			_resources = result.Data;
			TotalPagesCountChanged(result.TotalPages);
			@* await TotalPagesCountChanged.InvokeAsync(100); *@
		}
	}

    protected override async Task OnInitializedAsync()
	{
        await base.OnInitializedAsync();
		await ServerLoadAsync();
	}
}
