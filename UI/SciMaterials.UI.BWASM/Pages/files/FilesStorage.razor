@page "/files_storage"

@using SciMaterials.UI.BWASM.States.FilesStorage
@using SciMaterials.UI.BWASM.States.Categories
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@inherits FluxorComponent
@inject IDispatcher Dispatcher
@inject IState<FilesStorageState> State
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IJSRuntime JsRuntime
@inject IWebAssemblyHostEnvironment HostEnvironment


<MudText Class="mb-5" Typo="Typo.h3" Align="Align.Start">Files</MudText>

<MudPaper Elevation="5" Class="mb-3">
	<MudToolBar Dense="true">
		<IconButton Tooltip="Upload" Href="upload_files" Icon="@Icons.Material.Filled.UploadFile" />
		<IconButton Tooltip="Upload History" Href="files_upload_history" Icon="@Icons.Material.Filled.History" />
		<IconButton Tooltip="Files upload filter" Href="content_types" Icon="@Icons.Material.Filled.Filter" />
		<IconButton Tooltip="Categories" Href="categories" Icon="@Icons.Material.Filled.Category" />
		<MudSpacer />
		<FilesFilter ItemsPresentationMode="_itemsPresentationMode" OnItemsPresentationModeChanged="ChangeItemsPresentationMode" />
	</MudToolBar>
</MudPaper>

@if (State.Value.IsLoading)
{
	<p>Loading...</p>
}
else
{
	@switch (_itemsPresentationMode)
	{
		case ItemsPresentationMode.Table:
			<TableView Data="State.Value.Files">
				<TableHeader>
					<MudTh></MudTh>
					<MudTh>Name</MudTh>
					<MudTh>Category</MudTh>
					<MudTh>Size</MudTh>
					<MudTh></MudTh>
				</TableHeader>

				<RowTemplate>
					@*@if (true)
		{*@
					<MudTd><MudIcon Icon="@Icons.Material.Filled.FilePresent" /></MudTd>
					@*}
		else
		{
		<MudTd><MudIcon Icon="@Icons.Material.Filled.Folder"/></MudTd>
		}*@

					<MudTd DataLabel="Name">@context.FileName</MudTd>
					<MudTd DataLabel="Category">
						@context.Category
						<MudButton Variant="Variant.Filled" Size="Size.Small" OnClick="() => ChangeCategory(context)">Change</MudButton>
					</MudTd>
					<MudTd DataLabel="Size">@context.Size</MudTd>
					<MudTh>
						<MudIconButton Icon="@Icons.Filled.Download" OnClick="()=>DownloadFileFromUrl(context)"></MudIconButton>
						<MudButton Variant="Variant.Filled" Size="Size.Small" OnClick="() => NavigateToFileDetailsUrl(context)">Edit</MudButton>
						<MudButton Variant="Variant.Filled" Size="Size.Small" OnClick="() => Delete(context)">Delete</MudButton>
					</MudTh>
				</RowTemplate>
			</TableView>
			break;
			@*case ItemsPresentationMode.LargeGrid:
		<FilesGridView Files="State.Value.Files" OnFileSelected="NavigateToFileDetailsUrl"/>
		break;*@
	}
}

@code {
	private string filterValue { get; set; }
	private string sortValue { get; set; }
	private ItemsPresentationMode _itemsPresentationMode;
	private IJSObjectReference downloadFilesModule;

	protected override async Task OnInitializedAsync()
	{
		Refresh();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			downloadFilesModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/files-download.js");
		}
	}

	private void NavigateToFileDetailsUrl(FileStorageState context)
	{
		NavigationManager.NavigateTo($"/filedetails/{context.Id}");
	}

	private void ChangeItemsPresentationMode(ItemsPresentationMode mode)
	{
		_itemsPresentationMode = mode;
	}

	private void Delete(FileStorageState context)
	{
		Dispatcher.Dispatch(FilesStorageActions.DeleteFile(context.Id));
	}

	private void Refresh()
	{
		Dispatcher.Dispatch(FilesStorageActions.LoadFiles());
	}

	private async Task ChangeCategory(FileStorageState context)
	{
		var reference = DialogService.Show<FilesCategoriesSelector>();
		var result = await reference.Result;
		if (result.Cancelled || result.Data is not TreeFileCategory category) return;
		Snackbar.Add($"Category {category}");
	}

	private async Task DownloadFileFromUrl(FileStorageState context)
	{
		var fileName = context.FileName;
		var fileUrl = HostEnvironment.BaseAddress + $"api/files/DownloadById/{context.Id}";
		await downloadFilesModule.InvokeVoidAsync("triggerFileDownload", fileName, fileUrl);
	}
}